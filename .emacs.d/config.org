#+AUTHOR: Walker Malling
#+TITLE: Emacs Configuration

My =init.el= file uses =org-babel-load-file= to load the Emacs Lisp source code blocks in this document.  

Based on work by @itscaleb https://github.com/itscaleb/emacs.d

To look up what variables are used for, invoke =\C-h v= and type the variable name.

* Customize

Tell emacs to put any customization options in a separate file

#+BEGIN_SRC emacs-lisp
  (setf custom-file "~/.emacs.d/emacs-custom.el")
  (load custom-file t)
#+END_SRC

* Startup

I want my inital buffer to be my agenda for today

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
(add-hook 'after-init-hook '(lambda () (org-agenda-list 1)))
(delete-other-windows)
#+END_SRC

* Package

This adds melpa, loads packages, and installs all the packages I want. =package-selected-packages= is new in Emacs 25 and makes it easy to get all your packages installed on new computers.

#+BEGIN_SRC emacs-lisp


  (require 'package)

  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives
	       '("org" . "http://orgmode.org/elpa/") t)

  (add-to-list 'load-path "~/.emacs.d/elpa")
  (add-to-list 'load-path "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/bin")
  (add-to-list 'load-path "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/share")
  (add-to-list 'load-path "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/share/emacs/site-lisp")
  (add-to-list 'load-path "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/share/emacs/site-lisp/elpa")
  (add-to-list 'load-path "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/share/emacs/site-lisp/mu4e")
  (add-to-list 'load-path "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/share/emacs/site-lisp/elpa/async-20180408.844")
  (add-to-list 'load-path "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/share/emacs/site-lisp/elpa/dash-20180413.30")
  (add-to-list 'load-path "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/share/emacs/site-lisp/elpa/epl-20180205.1249")
  (add-to-list 'load-path "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/share/emacs/site-lisp/elpa/evil-20180408.1423")
  ;; (add-to-list 'load-path "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/share/emacs/site-lisp/elpa/exec-path-from-shell-20180323.1904")
  (add-to-list 'load-path "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/share/emacs/site-lisp/elpa/ghc-20180121.418")
  (add-to-list 'load-path "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/share/emacs/site-lisp/elpa/ghub-20180414.1654")
  (add-to-list 'load-path "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/share/emacs/site-lisp/elpa/git-commit-20180411.1649")
  (add-to-list 'load-path "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/share/emacs/site-lisp/elpa/goto-chg-20180105.1033")
  (add-to-list 'load-path "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/share/emacs/site-lisp/elpa/haskell-mode-20180406.2222")
  (add-to-list 'load-path "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/share/emacs/site-lisp/elpa/helm-20180413.335")
  (add-to-list 'load-path "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/share/emacs/site-lisp/elpa/helm-core-20180414.2257")
  (add-to-list 'load-path "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/share/emacs/site-lisp/elpa/helm-projectile-20180407.1842")
  (add-to-list 'load-path "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/share/emacs/site-lisp/elpa/let-alist-1.0.5")
  (add-to-list 'load-path "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/share/emacs/site-lisp/elpa/magit-20180416.852")
  (add-to-list 'load-path "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/share/emacs/site-lisp/elpa/magit-popup-20180329.1302")
  (add-to-list 'load-path "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/share/emacs/site-lisp/elpa/nix-mode-20180403.1741")
  (add-to-list 'load-path "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/share/emacs/site-lisp/elpa/org-plus-contrib-20180416")
  (add-to-list 'load-path "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/share/emacs/site-lisp/elpa/pkg-info-20150517.443")
  (add-to-list 'load-path "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/share/emacs/site-lisp/elpa/popup-20160709.729")
  (add-to-list 'load-path "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/share/emacs/site-lisp/elpa/powerline-20180321.1948")
  (add-to-list 'load-path "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/share/emacs/site-lisp/elpa/projectile-20180324.2226")
  (add-to-list 'load-path "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/share/emacs/site-lisp/elpa/s-20180406.108")
  (add-to-list 'load-path "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/share/emacs/site-lisp/elpa/solarized-theme-20180316.859")
  (add-to-list 'load-path "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/share/emacs/site-lisp/elpa/spaceline-20180412.526")
  (add-to-list 'load-path "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/share/emacs/site-lisp/elpa/undo-tree-0.6.5")
  (add-to-list 'load-path "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/share/emacs/site-lisp/elpa/with-editor-20180414.757")


  (add-to-list 'exec-path "/usr/local/bin")
  (add-to-list 'exec-path "/Users/walkermalling/.nix-profile/bin")

  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))

  ;; (projectile-global-mode)
  (setq projectile-completion-system 'helm)
  ;; (helm-projectile-on)

  (require 'evil)
  (evil-mode 1)

  (require 'helm-config)
  (helm-mode 1)

  (defun org-drill-all
    (interactive)
    (org-drill
      (directory-files-recursively "~/Dropbox/Org/dev/" "\.org$")))

  (require 'cl)
  (require 'org-drill)

#+END_SRC

* Pinentry

Enable pinentry

#+begin_src emacs-lisp
(setenv "INSIDE_EMACS" (format "%s,comint" emacs-version))
(pinentry-start)
#+end_src

* Flycheck Eslint

Use flycheck for linting.  The airbnb-extension seems to always have problems.  This snippet preferes using the local instead of the global eslint module.

http://emacs.stackexchange.com/questions/21205/flycheck-with-file-relative-eslint-executable

General Flycheck/Eslint setup tips:
http://codewinds.com/blog/2015-04-02-emacs-flycheck-eslint-jsx.html#flycheck_usage

#+BEGIN_SRC emacs-lisp
;;(defun my/use-eslint-from-node-modules ()
;;  (let* ((root (locate-dominating-file
;;                (or (buffer-file-name) default-directory)
;;                "node_modules"))
;;         (eslint (and root
;;                      (expand-file-name "node_modules/eslint/bin/eslint.js"
;;                                        root))))
;;    (when (and eslint (file-executable-p eslint))
;;      (setq-local flycheck-javascript-eslint-executable eslint))))
;;(add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)

#+END_SRC

* Appearance

#+BEGIN_SRC emacs-lisp

(add-to-list 'custom-theme-load-path "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/share/emacs/site-lisp/elpa/solarized-theme-20180316.859")

(require 'spaceline-config)
  (setf powerline-default-separator 'wave)
  (when (eq system-type 'darwin) ; fix for spaceline on mac
    (setf ns-use-srgb-colorspace nil))
  (spaceline-spacemacs-theme)
(load-theme 'solarized-light t)
(show-paren-mode t)
(menu-bar-mode -1)
(tool-bar-mode -1)
(size-indication-mode t)
(scroll-bar-mode -1)

#+END_SRC

* Basic Editing 

- turn tabs off
- use ido 
- turn on flycheck

#+BEGIN_SRC emacs-lisp

(setq-default indent-tabs-mode nil)
;; (ido-mode 1)
;; (add-hook 'after-init-hook #'global-flycheck-mode)

#+END_SRC

* Keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cg" 'org-clock-goto)
(global-set-key "\C-cb" 'org-iswitchb)
(global-set-key "\C-xt" 'toggle-truncate-lines)
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)
(global-set-key (kbd "M-x") #'helm-M-x)
(global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
(global-set-key (kbd "C-x C-f") #'helm-find-files)
#+END_SRC

* Org Mode
- have org mode apply syntax highlighting to src blocks
- defined todo keywords and their appearance
- persist clock for clocking time

#+BEGIN_SRC emacs-lisp

(setq org-hide-emphasis-markers t)
(setq org-src-fontify-natively t)
(setq org-list-allow-alphabetical t)

(setf org-todo-keywords '((sequence "TODO(t)" "BLACKLODGE(b)" "ELECTRIC(f)" "DONE(d)"))
      org-todo-keyword-faces '(
                               ("BLACKLODGE" . (:foreground "gray"))
                               ("ELECTRIC" . (:foreground "red" :weight bold :style italic))
                               ("DONE" . (:foreground "white" :style ))
                               ("TODO" . (:foreground "orange" :weight bold)))
      org-startup-indented t
      org-agenda-files '("~/Dropbox/Org/agenda")
      org-agenda-skip-scheduled-if-deadline-is-shown t
      org-agenda-text-search-extra-files (directory-files-recursively "~/Dropbox/Org/" "\.org$"))

;; from https://lists.gnu.org/archive/html/emacs-orgmode/2010-11/msg01351.html
;; any headline with level <= 2 is a target
(setq org-refile-targets '((nil :maxlevel . 2)
                                ; all top-level headlines in the
                                ; current buffer are used (first) as a
                                ; refile target
                           (org-agenda-files :maxlevel . 2)))

;; provide refile targets as paths, including the file name
;; (without directory) as level 1 of the path
(setq org-refile-use-outline-path 'file)

;; allow to create new nodes (must be confirmed by the user) as
;; refile targets
(setq org-refile-allow-creating-parent-nodes 'confirm)

(setf org-capture-templates
'(("c" "Clock into New Task" entry (file+headline "~/Dropbox/Org/agenda/tasks.org" "Tasks")
         "* TODO %?%^G\nCreated: %U\nContext: %a\n  %i" :clock-in t :clock-keep t)

        ("t" "Tasks" entry (file+headline "~/Dropbox/Org/agenda/tasks.org" "Tasks")
         "* TODO %?%^G\nCreated: %U\nContext: %a\n  %i")

        ("x" "MemCon" entry (file+datetree "~/Dropbox/Org/agenda/memcon.org")
         "* %?%^G\nCreated: %U")

        ("i" "Calendar Item/Event" entry (file+datetree "~/Dropbox/Org/agenda/calendar.org")
         "* %?%^G")

        ("m" "Meeting" entry (file+datetree "~/Dropbox/Org/agenda/meetings.org")
         "* %?%^G\nCreated: %U")

        ("d" "Dev Note" entry (file+datetree "~/Dropbox/Org/agenda/dev.org")
         "* %?%^G\nCreated: %U\nContext: %a\n %i")

        ("l" "Lit Note" entry (file+datetree "~/Dropbox/Org/agenda/lit.org")
         "* %?%^G\nCreated: %U")

        ("p" "Phil Note" entry (file+datetree "~/Dropbox/Org/agenda/phil.org")
         "* %?%^G\nCreated: %U")

        ("g" "Generic Note" entry (file+datetree "~/Dropbox/Org/agenda/generic.org")
         "* %?%^G\nCreated: %U")

        ("f" "Flashcard to current buffer" entry (file+headline (buffer-file-name) "Flash Cards")
         "* %? :drill:\nPrompt:\n** Answer") 

        ("b" "Add Checkbox to Clocked in Entry" item (clock) 
         "+ [ ] %? (%<%r>)" :prepend t)

        ("z" "Add Link To This Context to Clocked in Entry" item (clock)
         "- %a \n- %f" :prepend t)))


(setf org-clock-idle-time 10
      org-lowest-priority ?E
      org-default-priority ?E
      org-log-done 'time
      org-agenda-skip-scheduled-if-deadline-is-shown t
      org-clock-persist 'history)

(org-clock-persistence-insinuate)

;; start flyspell in org-mode
(add-hook 'org-mode-hook 'turn-on-flyspell)

(setf ispell-personal-dictionary "~/Dropbox/Org/dictionary")

;; create a function to archive all done tasks
(defun org-archive-done-tasks ()

  (interactive)
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (outline-previous-heading)))
   "/DONE" 'tree))

#+END_SRC

* Info Mode

Add custom directory to INFOPATH

#+begin_src emacs-lisp
;; disable this and install sicp from melpa
;; (add-to-list 'Info-default-directory-list "~/Dropbox/Org/info/")
#+end_src

* Notation Fonts


#+BEGIN_SRC emacs-lisp

(setq fixme-modes '(emacs-lisp-mode js2-mode rjsx-mode org-mode haskell-mode))
(make-face 'font-lock-fixme-face)
(make-face 'font-lock-study-face)
(make-face 'font-lock-important-face)
(make-face 'font-lock-question-face)
(make-face 'font-lock-note-face)
(make-face 'font-lock-see-face)
(mapc (lambda (mode)
        (font-lock-add-keywords
         mode
         '(("\\<\\(TODO\\)" 1 'font-lock-fixme-face t)
           ("\\<\\(STUDY\\)" 1 'font-lock-study-face t)
           ("\\<\\(IMPORTANT\\)" 1 'font-lock-important-face t)
           ("\\<\\(QUESTION\\)" 1 'font-lock-question-face t)
           ("\\<\\(SEE\\)" 1 'font-lock-see-face t)
           ("\\<\\(NOTE\\)" 1 'font-lock-note-face t)
           ("\\<\\(COMMENT\\)" 1 'font-lock-note-face t))))
      fixme-modes)
(modify-face 'font-lock-fixme-face "#D64C2A" nil nil t nil t nil nil)
(modify-face 'font-lock-study-face "Yellow" nil nil t nil t nil nil)
(modify-face 'font-lock-important-face "Yellow" nil nil t nil t nil nil)
(modify-face 'font-lock-question-face "#ffa500" nil nil t nil t nil nil)
(modify-face 'font-lock-see-face "#88C9F0" nil nil t nil t nil nil)
(modify-face 'font-lock-note-face "#8ABB93" nil nil t nil t nil nil)

#+END_SRC

* JavaScript

Configure indentation.  Fix rjsx-mode & js-mode default indentation for switch statements.

Associate rjsx-mode to .js and .jsx files.

#+BEGIN_SRC emacs-lisp

(setq js2-basic-offset 2)
(setq js-switch-indent-offset 2)

;; JSON files are opened with js-mode
(add-hook 'js-mode-hook
          (lambda ()
            (make-local-variable 'js-indent-level)
            (setq js-indent-level 2)))

(add-to-list 'auto-mode-alist '("\\.js\\'" . rjsx-mode))
(add-to-list 'auto-mode-alist '("\\.jsx\\'" . rjsx-mode))
(add-to-list 'interpreter-mode-alist '("node" . rjsx-mode))

(add-to-list 'auto-mode-alist '("\\.hbs\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))

#+END_SRC

* Haskell

The only way I was able to get this work was by installing ghci directlly, in addition to using stack.

So I basically have two different ghci's.

#+BEGIN_SRC emacs-lisp

(add-to-list 'auto-mode-alist '("\\.hs\\'" . haskell-mode))
;; (add-to-list 'auto-mode-alist '("\\.hs\\'" . intero-mode))

#+END_SRC
* Babel

Define a node path for use with babel and define a place for babel to look for npm modules.

#+BEGIN_SRC emacs-lisp

(setenv "NODE_PATH"
  (concat
    (getenv "HOME") "/org/node_modules" ":"
    (getenv "NODE_PATH")))

(org-babel-do-load-languages
 'org-babel-load-languages
 '((js . t)
   (emacs-lisp . t)
   (haskell . t)
   ))

#+END_SRC
* Mu/Mu4e

#+BEGIN_SRC emacs-lisp

;; (add-to-list 'load-path "~/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/bin")

;; (add-to-list 'exec-path "/Users/walkermalling/.nix-profile/bin/mbsync")

(setf send-mail-function 'smtpmail-send-it
	smtpmail-stream-type 'starttls
	smtpmail-smtp-service 587
	message-kill-buffer-on-exit t)

(require 'mu4e)
(require 'org-mu4e)

(setq mail-user-agent 'mu4e-user-agent)

(setq mu4e-mu-binary "/nix/store/5aqvkiz4dwhk7qjjp476s9nnn8xiwvxk-emacs-packages-deps/bin/mu")

(global-set-key (kbd "C-c m") 'mu4e)

(setf mu4e-maildir "~/.mail"
	mu4e-view-show-images t
	mu4e-update-interval 300
	mu4e-view-show-addresses t
	mu4e-hide-index-messages t
	mu4e-decryption-policy 'ask
	mu4e-compose-format-flowed t
	mu4e-context-policy 'ask-if-none
	mu4e-get-mail-command "mbsync -a"
	mu4e-change-filenames-when-moving t

	mu4e-compose-context-policy 'ask-if-none
	mu4e-headers-fields '((:human-date	. 15)
			      (:flags		. 6)
			      (:from		. 30)
			      (:thread-subject	. nil)))

(setf mu4e-sent-folder "/sent"
      mu4e-drafts-folder "/drafts"
      mu4e-trash-folder "/trash"
      user-full-name "Walker Malling"
      user-mail-address "walker.malling@gmail.com")

#+END_SRC
