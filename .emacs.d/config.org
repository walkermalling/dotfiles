#+TITLE: Emacs Configuration
#+AUTHOR: Walker Malling

My =init.el= file uses =org-babel-load-file= to load the Emacs Lisp source code blocks in this document.  

Based on work by @itscaleb https://github.com/itscaleb/emacs.d

To look up what variables are used for, invoke =\C-h v= and type the variable name.

Useful links:

https://www.gnu.org/software/emacs/
https://www.gnu.org/software/emacs/manual/html_node/emacs/index.html
https://www.emacswiki.org/emacs/SiteMap

https://orgmode.org/
https://orgmode.org/worg/
https://orgmode.org/worg/org-contrib/

https://www.gnu.org/software/emacs/manual/html_node/eintr/

* Customize

Tell emacs to put any customization options in a separate file.

#+BEGIN_SRC emacs-lisp
  (setf custom-file "~/.emacs.d/emacs-custom.el")
  (load custom-file t)
#+END_SRC

* Startup

I want my inital buffer to be my agenda for today (see the orgmode section of this doc for more about agendas).

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
(add-hook 'after-init-hook '(lambda () (org-agenda-list 1)))
(delete-other-windows)
#+END_SRC

* Packages
This adds melpa, loads packages, and installs all the packages I want. =package-selected-packages= is new in Emacs 25 and makes it easy to get all your packages installed on new computers.

In practice this fails quite a bit, and I've been looking into using nix to mangage emacs packages. 

#+BEGIN_SRC emacs-lisp

  (require 'package)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives
	       '("org" . "http://orgmode.org/elpa/") t)

  (when (not package-archive-contents)
      (package-refresh-contents))

  (setf package-selected-packages '(org-plus-contrib
                                    haskell-mode
                                    intero-mode
                                    magit
                                    solarized-theme
                                    projectile
                                    helm
                                    helm-config
                                    helm-projectile
                                    spaceline
                                    restclient
                                    js2-mode
                                    rjsx-mode
                                    web-mode
                                    flycheck
                                    exec-path-from-shell
                                    tuareg
                                    ensime
                                    pinentry
                                    evil
                                    markdown-mode
                                    undo-tree
                                    ))

  (package-install-selected-packages)

#+END_SRC

* Exec Path From Shell

Make various commands usually available in your shell also available to emacs.

https://github.com/purcell/exec-path-from-shell

Explicitly add nix packages.

#+BEGIN_SRC emacs-lisp
 (exec-path-from-shell-initialize)

 (add-to-list 'exec-path "~/.nix-profile/bin")
 (add-to-list 'exec-path "/usr/local/bin")
#+END_SRC

* Appearance

Configure spaceline; turn off a lot of things (menu bar, scroll bar), load a theme, etc.

#+BEGIN_SRC emacs-lisp
(require 'spaceline-config)

(setf powerline-default-separator 'wave)

(when (eq system-type 'darwin) ; fix for spaceline on mac
    (setf ns-use-srgb-colorspace nil))

;; set spaceline theme
(spaceline-spacemacs-theme)

;; tried zen mode for a while, but solarized is best; matches terminal theme
;; this is set to solarized light because I do most of my work at work during the day
;; but it is easy to swich to solarized-dark in low light settings, which makes for consistent experience
(load-theme 'solarized-light t) 

;; highlight matching parentheses
(show-paren-mode t)

;; turn off menu bar
(menu-bar-mode -1)

;; turn off toolbar
(tool-bar-mode -1)

;; I forget what this does
(size-indication-mode t)

;; turn off scrollbar: must have when you are jockeying multiple buffers in a single frame
(scroll-bar-mode -1)

#+END_SRC

* Basic Editing 

Turn on auto-revert so that changes to files outside of emacs are reflected in the current buffer.

Get ride of tabs.

Enable flycheck.

#+BEGIN_SRC emacs-lisp

(global-auto-revert-mode t)

(setq-default indent-tabs-mode nil)

;; (ido-mode 1)

(add-hook 'after-init-hook #'global-flycheck-mode)

#+END_SRC

* Evil mode 
I confess I had my doubts about evil mode (vim keybindings inside emacs), thinking it would be like driving a car with a joystick. But it turns out to be really solid package with great defaults.  

#+BEGIN_SRC emacs-lisp
(require 'evil)
(evil-mode 1)
#+END_SRC

* Projectile
This package is takes emacs a tiny step towards an IDE, giving it the concept of a project context.

https://github.com/bbatsov/projectile

It has many more features than I typically use.

#+BEGIN_SRC emacs-lisp
;; (projectile-global-mode)
(setq projectile-completion-system 'helm)

;; leave helm-projectile off for now 
;; (helm-projectile-on)
#+END_SRC

* Helm mode
I had my doubts about helm, but its great.

https://github.com/emacs-helm/helm/wiki#general-concept

#+BEGIN_SRC emacs-lisp
  (require 'helm-config)
  (helm-mode 1)
#+END_SRC
* Pinentry

Enable pinentry for emacs.

#+begin_src emacs-lisp
(setenv "INSIDE_EMACS" (format "%s,comint" emacs-version))
(pinentry-start)
#+end_src

* Keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cg" 'org-clock-goto)
(global-set-key "\C-cb" 'org-iswitchb)
(global-set-key "\C-xt" 'toggle-truncate-lines)
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)
(global-set-key (kbd "M-x") #'helm-M-x)
(global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
(global-set-key (kbd "C-x C-f") #'helm-find-files)
#+END_SRC

* Org Mode

Orgmode can do just about anything; this config section may seem long but it really scratches the surface.  In the future I'd like to spendmore time being specific about custom agenda views, effort estimates, etc.

----

Set the todo keywords sequence, as well as styles for keywords.

"ELEC" is short for electric (Twin Peaks fan), or maybe "elected for work".  

"HOLD" used to be "Blacklodge", but I wanted all todo item descriptions to line up in my agenda view.

I want work that I've archived to show up in reports, so I add the archive file to ~org-agenda-files~.

/Temporarily/ I want to be able to demo agenda functions in my demo file, so add that to ~org-agenda-files~ as well.

Exapand teh scope of text search to the whole /org directory.

#+BEGIN_SRC emacs-lisp

(setf org-todo-keywords '((sequence "TODO(t)" "HOLD(h)" "ELEC(e)" "DONE(d)"))
      org-todo-keyword-faces '(
                               ("HOLD" . (:foreground "gray"))
                               ("ELEC" . (:foreground "red" :weight bold :style italic))
                               ("DONE" . (:foreground "black" :style ))
                               ("TODO" . (:foreground "orange" :weight bold)))
      org-startup-indented t
      org-agenda-files '("~/dev/org/agenda" )
      org-agenda-skip-scheduled-if-deadline-is-shown t
      org-agenda-text-search-extra-files (directory-files-recursively "~/dev/org/" "\.org$"))

(add-to-list 'org-agenda-files "~/dev/emacs-org-mode-demo.org" "~/dev/org/agenda/tasks.org_archive")

#+END_SRC


Configure my capture templates:

| c | clock into new task                               | ~/org/agenda/tasks.org~
| t | new task                                          | ~/org/agenda/tasks.org~
| x | memcon (memorandum of conversation                | ~/org/agenda/memcon.org~
| l | daily log                                         | ~/org/agenda/loglady.org~
| m | meeting or calendar event                         | ~/org/agenda/calendar.org~
| d | dev note (general how tos, problems solved, etc.) | ~/org/agenda/dev.org~
| g | glossary                                          | ~/org/notes/notes.org#Glossary~
| r | reading note                                      | ~/org/notes/notes.org#Reading List~
| n | generic note                                      | ~/org/notes/notes.org#Notes~
| f | flashcard                                         | ~/org/notes/notes.org#Flashcards~
| z | add link to this context to clocked in entry      |

Todos should create a descriptive headline, but everything else should be filed by datetree.

Generally, ask for a ~Title~ and a ~tag~, insert ~Created~ datetime.

I used to capture context in every note, but that was inconsistently useful, so now I can "capture" a current context and add it to the clocked in item.

#+BEGIN_SRC emacs-lisp

(setf org-capture-templates
'(("c" "Clock into New Task" entry (file+headline "~/dev/org/agenda/tasks.org" "Tasks")
         "* TODO %^{Title} %^G\nCreated: %U \n  %i\n%?" :clock-in t :clock-keep t)
        ("t" "Tasks" entry (file+headline "~/dev/org/agenda/tasks.org" "Tasks")
         "* TODO %^{Title} %^G\nCreated: %U \n %i\n%?")
        ("x" "MemCon" entry (file+datetree "~/dev/org/agenda/memcon.org")
         "* %^{Descriptive/Context} %^G\nDate: %t\n%?")
        ("l" "LogLady" entry (file+datetree "~/dev/org/agenda/loglady.org")
         "* Log\nLearned: %?\nAccomplished: \nTime: \nAnalysis: ")
        ("m" "Meeting/Calendar Event" entry (file+datetree "~/dev/org/agenda/calendar.org")
         "* %^{Meeting or Event Title} %^G\n%^t%?")
        ("d" "Dev Note" entry (file+datetree "~/dev/org/agenda/dev.org")
         "* %^{Title} %^G\nCreated: %U\nContext: %a\n %i %?")

        ("g" "Gloss (glossary)" entry (file+headline "~/dev/org/notes/notes.org" "Glossary")
         "* %^{Title} %^G\nContext: %a\n %i %?")
        ("r" "Reading (article/book)" entry (file+headline "~/dev/org/notes/notes.org" "Reading List")
         "* %^{Title} %^G\nContext: %a\n %i %?")

        ("n" "Notes (generic)" entry (file+headline "~/dev/org/notes/notes.org" "Notes")
         "* %^{Title} %^G\nContext: %a\n %i %?")
        ("f" "Flashcard" entry (file+headline "~/dev/org/notes/notes.org" "Flashcards")
         "* %^{Title} %^g \n%i %?\n** Answer \n")
  
        ("z" "Add Link To This Context to Clocked in Entry" item (clock)
         "- %a \n- %f" :prepend t)))

#+END_SRC

Set clock idle time to 10 minute intervals.

Configure the ~PRIORITY~ property on todos: A through H, but use the ~fancy-priorities~ package to designate unicode characters for each priority.

#+begin_src emacs-lisp

(setf org-clock-idle-time 10 
      org-lowest-priority ?H
      org-default-priority ?H
      org-log-done 'time
      org-agenda-skip-scheduled-if-deadline-is-shown t
      org-clock-persist 'history)

(org-clock-persistence-insinuate)

(require 'org-fancy-priorities)
(setq org-fancy-priorities-list '("█" "▇" "▆" "▅" "▄" "▃" "▂" "▁"))
(add-hook 'org-mode-hook 'org-fancy-priorities-mode)

;;(use-package org-fancy-priorities
;;  :ensure t
;;  :hook
;;  (org-mode . org-fancy-priorities-mode)
;;  :config
;;  (setq org-fancy-priorities-list '("⚡" "⬆" "⬇")))

#+end_src


I would like to periodically clean up my ~tasks.org~ file.  Here is a function which goes through and archives all tasks marked as "DONE"

#+BEGIN_SRC emacs-lisp

(defun org-archive-done-tasks ()

  (interactive)
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (outline-previous-heading)))
   "/DONE" 'tree))

#+END_SRC


Other general settings.

#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
(setq org-src-fontify-natively t)
(setq org-list-allow-alphabetical t)

;; start flyspell in org-mode
(add-hook 'org-mode-hook 'turn-on-flyspell)

(setf ispell-personal-dictionary "~/dev/org/dictionary")

#+END_SRC

The following is not something I use, but I'd like to keep for reference.  It lets you configure different emphasis characters.  

I was running into an issue where operators in my code blocks were conflicting with markdown syntax (such as Haskell's concatenation operator ~++~).  And while omitting strikethrough (+this is usually struck out+) is a step, the appearance of two pairs together ~++ ++~ is still automatically hidden, making the rendered code appear incorrect.

See https://stackoverflow.com/questions/22491823/disable-certain-org-mode-markup?rq=1

#+BEGIN_SRC emacs-lisp
(setq org-emphasis-alist (quote (("*" bold "<b>" "</b>")
                                 ("/" italic "<i>" "</i>")
                                 ("_" underline "<span style=\"text-decoration:underline;\">" "</span>")
                                 ("=" org-code "<code>" "</code>" verbatim)
                                 ("~" org-verbatim "<code>" "</code>" verbatim))))
#+END_SRC

* Org-Drill
Trying to get in the habit of turning notes into flashcards. This tells org-drill to scan my /org directory for anything tagged with =drill=.
#+BEGIN_SRC emacs-lisp
(defun org-drill-all ()
  (interactive)
  (org-drill
    (directory-files-recursively "~/dev/org/" "\.org$")))

(require 'cl)
(require 'org-drill)
#+END_SRC

* Gnus & Email

I used to read email through gnus, with the express benefit that you can link to emails within org todo items.

At the moment I'm trying to set up mu adn mu4e.

#+BEGIN_SRC emacs-lisp
;;(setq gnus-select-method
;;           '(nnimap "stbeehive.oracle.com"
;;           (nnimap-stream ssl)
;;           ))
#+END_SRC

* Info Mode

For non-unix folk, info is a format for manuals. I keep a few tomes in a custom directory. Add custom directory to INFOPATH.  

#+begin_src emacs-lisp
;; disable this and install sicp from melpa
;; (add-to-list 'Info-default-directory-list "~/dev/org/info/")
#+end_src

* Babel 

Babel is a powerful literate programming tool for emacs.  This document is loaded through babel (each ~emacs-lisp~ codeblock is evaluated and, in aggregate, constites the executed config).  But I take a lot of notes as I learn about different programming languages (currently Haskell) and this lets me embed executable examples in my notes.

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((js . t)
   (emacs-lisp . t)
   (haskell . t)
   (clojure . t)
   (ditaa .t)
   ))
#+end_src

* Notation Fonts

Useful for consistently highlighting things like TODO in various codebases.

#+BEGIN_SRC emacs-lisp

(setq fixme-modes '(emacs-lisp-mode js2-mode rjsx-mode org-mode haskell-mode))
(make-face 'font-lock-fixme-face)
(make-face 'font-lock-study-face)
(make-face 'font-lock-important-face)
(make-face 'font-lock-question-face)
(make-face 'font-lock-note-face)
(make-face 'font-lock-see-face)
(mapc (lambda (mode)
        (font-lock-add-keywords
         mode
         '(("\\<\\(TODO\\)" 1 'font-lock-fixme-face t)
           ("\\<\\(STUDY\\)" 1 'font-lock-study-face t)
           ("\\<\\(IMPORTANT\\)" 1 'font-lock-important-face t)
           ("\\<\\(QUESTION\\)" 1 'font-lock-question-face t)
           ("\\<\\(SEE\\)" 1 'font-lock-see-face t)
           ("\\<\\(NOTE\\)" 1 'font-lock-note-face t)
           ("\\<\\(COMMENT\\)" 1 'font-lock-note-face t))))
      fixme-modes)
(modify-face 'font-lock-fixme-face "#D64C2A" nil nil t nil t nil nil)
(modify-face 'font-lock-study-face "Black" nil nil t nil t nil nil)
(modify-face 'font-lock-important-face "Yellow" nil nil t nil t nil nil)
(modify-face 'font-lock-question-face "#ffa500" nil nil t nil t nil nil)
(modify-face 'font-lock-see-face "#88C9F0" nil nil t nil t nil nil)
(modify-face 'font-lock-note-face "#8ABB93" nil nil t nil t nil nil)

#+END_SRC

* Haskell

The only way I was able to get this work was by installing ghci directlly, in addition to using stack.

So I basically have two different ghci's.

#+BEGIN_SRC emacs-lisp

(add-to-list 'auto-mode-alist '("\\.hs\\'" . haskell-mode))
;; (add-to-list 'auto-mode-alist '("\\.hs\\'" . intero-mode))

#+END_SRC

* JavaScript

Configure indentation.  Fix rjsx-mode & js-mode default indentation for switch statements.

Associate rjsx-mode to .js and .jsx files.

#+BEGIN_SRC emacs-lisp

(setq js2-basic-offset 2)
(setq js-switch-indent-offset 2)

;; JSON files are opened with js-mode
(add-hook 'js-mode-hook
          (lambda ()
            (make-local-variable 'js-indent-level)
            (setq js-indent-level 2)))

(add-to-list 'auto-mode-alist '("\\.js\\'" . rjsx-mode))
(add-to-list 'auto-mode-alist '("\\.jsx\\'" . rjsx-mode))
(add-to-list 'interpreter-mode-alist '("node" . rjsx-mode))

(add-to-list 'auto-mode-alist '("\\.hbs\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))

#+END_SRC
 
* Flycheck Eslint

Use flycheck for linting.  

The airbnb-extension seems to always have problems.  This snippet preferes using the local instead of the global eslint module.

http://emacs.stackexchange.com/questions/21205/flycheck-with-file-relative-eslint-executable

General Flycheck/Eslint setup tips:
http://codewinds.com/blog/2015-04-02-emacs-flycheck-eslint-jsx.html#flycheck_usage

#+BEGIN_SRC emacs-lisp
(defun my/use-eslint-from-node-modules ()
  (let* ((root (locate-dominating-file
                (or (buffer-file-name) default-directory)
                "node_modules"))
         (eslint (and root
                      (expand-file-name "node_modules/eslint/bin/eslint.js"
                                        root))))
    (when (and eslint (file-executable-p eslint))
      (setq-local flycheck-javascript-eslint-executable eslint))))
(add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)

#+END_SRC

* Typescript

#+begin_src emacs-lisp
(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1))

;; aligns annotation to the right hand side

(setq company-tooltip-align-annotations t)

;; formats the buffer before saving
(add-hook 'before-save-hook 'tide-format-before-save)
(add-hook 'typescript-mode-hook #'setup-tide-mode)

#+end_src

* Eshell-here

From: https://writequit.org/articles/working-with-logs-in-emacs.html#other-packages

#+begin_src emacs-lisp

(defun eshell-here ()
  "Opens up a new shell in the directory associated with the
current buffer's file. The eshell is renamed to match that
directory to make multiple eshell windows easier."
  (interactive)
  (let* ((parent (if (buffer-file-name)
                     (file-name-directory (buffer-file-name))
                   default-directory))
         (height (/ (window-total-height) 3))
         (name   (car (last (split-string parent "/" t)))))
    (split-window-vertically (- height))
    (other-window 1)
    (eshell "new")
    (rename-buffer (concat "*eshell: " name "*"))

    (insert (concat "ls"))
    (eshell-send-input)))

#+end_src
