#+TITLE: Emacs Configuration
#+AUTHOR: Walker Malling
​
* Customize
​
Tell emacs to put any customization options in a separate file.
​
#+BEGIN_SRC emacs-lisp
 (setf custom-file "~/.emacs.d/emacs-custom.el")
 (load custom-file t)
#+END_SRC
​
* Startup
​
I want my inital buffer to be my agenda for today (see the orgmode section of this doc for more about agendas).
​
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
(add-hook 'after-init-hook '(lambda () (org-agenda-list 1)))
(delete-other-windows)
(load-theme 'solarized-dark t)

(require 'server)
(unless (server-running-p)
  (server-start))

(defun start-capture (template-key)
   "Start capture with the template assigned to TEMPLATE-KEY"
   (make-frame '((alpha . 90)(height . 30)
		  (top . -1)(left . -10)(autoraise . t)
		  (title . "Capture")(name . "captureframe")))
   (select-frame-by-name "captureframe")
   (org-capture nil template-key)
   (delete-other-windows))

 (defadvice org-capture-finalize (after delete-capture-frame activate)
   "Advise capture-finalize to close the frame if it is the capture frame"
   (if (equal "captureframe" (frame-parameter nil 'name))
	(delete-frame)))

(yas-global-mode 1)

#+END_SRC
​
* Backup Directory 
I don't want to clutter my filetree with backup files, so store all of them in the same place.
https://www.emacswiki.org/emacs/BackupDirectory

#+begin_src emacs-lisp
(setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist
    '(("." . "~/.backups-emacs/"))    ; don't litter my fs tree
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)       ; use versioned backups
#+end_src
* Exec Path From Shell
​
Make various commands usually available in your shell also available to emacs.
​
https://github.com/purcell/exec-path-from-shell
​
Explicitly add nix packages.
​
#+BEGIN_SRC emacs-lisp
(exec-path-from-shell-initialize)
(add-to-list 'exec-path "~/.nix-profile/bin")
#+END_SRC

* Key Binding

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cj" 'org-clock-jump-to-current-clock)
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-xt" 'toggle-truncate-lines)
(global-set-key (kbd "M-x") #'helm-M-x)
(global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
(global-set-key (kbd "C-x C-f") #'helm-find-files)
#+END_SRC

* Appearance

#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

* Editing
#+BEGIN_SRC emacs-lisp
(require 'evil)
(evil-mode 1)
#+END_SRC

* Yasnippet

#+begin_src emacs-lisp

(setq yas-snippet-dirs
      '("~/.emacs.d/snippets"))
#+end_src

* Helm 
#+BEGIN_SRC emacs-lisp
(require 'helm-config)
(helm-mode 1)
#+END_SRC 

* Powerline 
#+BEGIN_SRC emacs-lisp
(setf powerline-default-separator 'wave)
(spaceline-spacemacs-theme)
#+END_SRC 

* Projectile 
#+BEGIN_SRC emacs-lisp
(setq projetile-completion-system 'helm)
#+END_SRC 

* Org 
#+BEGIN_SRC emacs-lisp

(defun org-drill-all ()
  (interactive)
  (org-drill
  (directory-files-recursively "~/Dropbox/Org/" "\.org$")))

(require 'cl)
(require 'org-drill)
;;(require 'org-habit)

(setf org-todo-keywords
  '((sequence "TODO(t)" "BLOCKED(b)" "ELECTRIC(a)" "DONE(d)"))
      org-todo-keyword-faces '(
                               ("BLOCKED" . (:foreground "gray"))
                               ("ELECTRIC" . (:foreground "red" :weight bold :style italic))
                               ("DONE" . (:foreground "black" :style ))
                               ("TODO" . (:foreground "orange" :weight bold)))
      org-startup-indented t
      org-agenda-files '("~/Dropbox/Org/agenda")
      org-agenda-skip-scheduled-if-deadline-is-shown t
      org-agenda-text-search-extra-files (directory-files-recursively "~/Dropbox/Org/" "\.org$"))

(setf org-clock-idle-time 10 
      org-log-done 'time
      org-agenda-skip-scheduled-if-deadline-is-shown t
      org-clock-persist 'history
      org-hide-emphasis-markers t
      org-list-allow-alphabetical t
      ispell-personal-dictionary "~/Dropbox/Org/dictionary")

(setf org-capture-templates
      '(("c" "Clock into New Task" entry (file+headline "~/Dropbox/Org/agenda/tasks.org" "Tasks")
      "* TODO %^{Title} %^G\nCreated: %U \n  %i\n%?" :clock-in t :clock-keep t)
      ("t" "Tasks" entry (file+headline "~/Dropbox/Org/agenda/tasks.org" "Tasks")
      "* TODO %^{Title} %^G\nCreated: %U \n %i\n%?")
      ("m" "Meeting/Calendar Event" entry (file+datetree "~/Dropbox/Org/agenda/calendar.org")
      "* %^{Meeting or Event Title} %^G\n%^t%?")
      ("d" "Note" entry (file+datetree "~/Dropbox/Org/notes/notes.org")
      "* %^{Title} %^G\nCreated: %U\nContext: %a\n %i %?")
      ("r" "Reading Log (article/book)" entry (file+headline "~/Dropbox/Org/notes/notes.org" "Reading List")
      "* %^{Title} %^G\nContext: %a\n %i %?")
      ("f" "Flashcard" entry (file+headline "~/Dropbox/Org/notes/notes.org" "Flashcards")
      "* %^{Title} %^g \n%i %?\n** Answer \n")
      ("z" "Add Link To This Context to Clocked in Entry" item (clock)
      "- %a \n- %f" :prepend t)))

(setq org-refile-targets '((nil :maxlevel . 9)
                                (org-agenda-files :maxlevel . 9)))
(setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
(setq org-refile-use-outline-path t)                  ; Show full paths for refiling

      #+END_SRC
