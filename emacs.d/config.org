#+AUTHOR: Walker Malling
#+TITLE: Emacs Configuration

My =init.el= file uses =org-babel-load-file= to load the Emacs Lisp source code blocks in this document.  

Based on work by @itscaleb https://github.com/itscaleb/emacs.d

To look up what variables are used for, invoke =\C-h v= and type the variable name.

* Customize

Tell emacs to put any customization options in a separate file

#+BEGIN_SRC emacs-lisp
  (setf custom-file "~/.emacs.d/emacs-custom.el")
  (load custom-file t)
#+END_SRC

* Startup

I want my inital buffer to be my agenda for today

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
(add-hook 'after-init-hook '(lambda () (org-agenda-list 1)))
(delete-other-windows)
#+END_SRC

* Package

This adds melpa, loads packages, and installs all the packages I want. =package-selected-packages= is new in Emacs 25 and makes it easy to get all your packages installed on new computers.

#+BEGIN_SRC emacs-lisp

  (require 'package)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives
	       '("org" . "http://orgmode.org/elpa/") t)

  (when (not package-archive-contents)
      (package-refresh-contents))

  (setf package-selected-packages '(org-plus-contrib
                                    haskell-mode
                                    magit
                                    rebecca
                                    helm-config
                                    zenburn-theme
                                    spaceline
                                    restclient
                                    js2-mode
                                    rjsx-mode
                                    web-mode
                                    flycheck
                                    exec-path-from-shell
                                    multiple-cursors
                                    haskell-mode))

  (package-install-selected-packages)
  (exec-path-from-shell-initialize)
  (add-to-list 'exec-path "~/.nix-profile/bin")

#+END_SRC

* Flycheck Eslint

Use flycheck for linting.  The airbnb-extension seems to always have problems.  This snippet preferes using the local instead of the global eslint module.

http://emacs.stackexchange.com/questions/21205/flycheck-with-file-relative-eslint-executable

General Flycheck/Eslint setup tips:
http://codewinds.com/blog/2015-04-02-emacs-flycheck-eslint-jsx.html#flycheck_usage

#+BEGIN_SRC emacs-lisp
(defun my/use-eslint-from-node-modules ()
  (let* ((root (locate-dominating-file
                (or (buffer-file-name) default-directory)
                "node_modules"))
         (eslint (and root
                      (expand-file-name "node_modules/eslint/bin/eslint.js"
                                        root))))
    (when (and eslint (file-executable-p eslint))
      (setq-local flycheck-javascript-eslint-executable eslint))))
(add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)

#+END_SRC

* Appearance

#+BEGIN_SRC emacs-lisp

(require 'spaceline-config)
  (setf powerline-default-separator 'wave)
  (when (eq system-type 'darwin) ; fix for spaceline on mac
    (setf ns-use-srgb-colorspace nil))
  (spaceline-spacemacs-theme)
(load-theme 'rebecca t)
(show-paren-mode t)
(menu-bar-mode -1)
(tool-bar-mode -1)
(size-indication-mode t)
(scroll-bar-mode -1)

#+END_SRC

* Basic Editing 

- turn tabs off
- use ido 
- turn on flycheck

#+BEGIN_SRC emacs-lisp

(setq-default indent-tabs-mode nil)
(ido-mode 1)
(add-hook 'after-init-hook #'global-flycheck-mode)

#+END_SRC

* Keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cg" 'org-clock-goto)
(global-set-key "\C-cb" 'org-iswitchb)
(global-set-key "\C-xt" 'toggle-truncate-lines)
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)
#+END_SRC

* Org Mode
- have org mode apply syntax highlighting to src blocks
- defined todo keywords and their appearance
- persist clock for clocking time

#+BEGIN_SRC emacs-lisp

(setq org-hide-emphasis-markers t)
(setq org-src-fontify-natively t)

(setf org-todo-keywords '((sequence "BACKLOG" "TODO" "IN PROGRESS" "IN REVIEW" "BLOCKED" "DONE"))
      org-todo-keyword-faces '(
                               ("BACKLOG" . (:foreground "gray"))
                               ("BLOCKED" . (:foreground "red" :weight bold))
                               ("IN PROGRESS" . (:foreground "green" :weight bold))
                               ("DONE" . (:foreground "blue"))
                               ("TODO" . (:foreground "orange" :weight bold)))
      org-startup-indented t
      org-agenda-files '("~/Dropbox/Org/agenda")
      org-agenda-skip-scheduled-if-deadline-is-shown t
      org-default-notes-file '("~/Dropbox/Org/agenda/inbox.org")
      org-agenda-text-search-extra-files (directory-files-recursively "~/Dropbox/Org/" "\.org$"))

(setf org-capture-templates
      '(("c" "Clock into New Task" entry (file+headline "~/Dropbox/Org/agenda/tasks.org" "Tasks")
         "* TODO %?%^G\nCreated: %U\nContext: %a\n  %i" :clock-in t :clock-keep t)
        ("t" "Tasks" entry (file+headline "~/Dropbox/Org/agenda/tasks.org" "Tasks")
         "* TODO %?%^G\nCreated: %U\nContext: %a\n  %i")
        ("x" "MemCon" entry (file+datetree "~/Dropbox/Org/agenda/memcon.org")
         "* %?%^G\nCreated: %U")
        ("i" "Calendar Item/Event" entry (file+datetree "~/Dropbox/Org/agenda/calendar.org")
         "* %?%^G")
        ("m" "Meeting" entry (file+datetree "~/Dropbox/Org/agenda/meetings.org")
         "* %?%^G\nCreated: %U")
        ("d" "Dev Note" entry (file+datetree "~/Dropbox/Org/agenda/dev.org")
         "* %?%^G\nCreated: %U\nContext: %a\n %i")
        ("l" "Lit Note" entry (file+datetree "~/Dropbox/Org/agenda/lit.org")
         "* %?%^G\nCreated: %U")
        ("p" "Phil Note" entry (file+datetree "~/Dropbox/Org/agenda/phil.org")
         "* %?%^G\nCreated: %U")
        ("r" "Random" entry (file+datetree "~/Dropbox/Org/agenda/rand.org")
         "* %?%^G\nCreated: %U\nContext: %a\n %i")
        ("b" "Add Checkbox to Clocked in Entry" item (clock) 
         "+ [ ] %? (%<%r>)" :prepend t)
        ("z" "Add Link To This Context to Clocked in Entry" item (clock)
         "- %a \n- %f" :prepend t)))


(setf org-clock-idle-time 10
      org-lowest-priority ?E
      org-default-priority ?E
      org-log-done 'time
      org-agenda-skip-scheduled-if-deadline-is-shown t
      org-clock-persist 'history)

(org-clock-persistence-insinuate)

#+END_SRC

* Notation Fonts


#+BEGIN_SRC emacs-lisp

(setq fixme-modes '(emacs-lisp-mode js2-mode org-mode haskell-mode))
(make-face 'font-lock-fixme-face)
(make-face 'font-lock-study-face)
(make-face 'font-lock-important-face)
(make-face 'font-lock-question-face)
(make-face 'font-lock-note-face)
(make-face 'font-lock-see-face)
(mapc (lambda (mode)
        (font-lock-add-keywords
         mode
         '(("\\<\\(TODO\\)" 1 'font-lock-fixme-face t)
           ("\\<\\(STUDY\\)" 1 'font-lock-study-face t)
           ("\\<\\(IMPORTANT\\)" 1 'font-lock-important-face t)
           ("\\<\\(QUESTION\\)" 1 'font-lock-question-face t)
           ("\\<\\(SEE\\)" 1 'font-lock-see-face t)
           ("\\<\\(NOTE\\)" 1 'font-lock-note-face t)
           ("\\<\\(COMMENT\\)" 1 'font-lock-note-face t))))
      fixme-modes)
(modify-face 'font-lock-fixme-face "#D64C2A" nil nil t nil t nil nil)
(modify-face 'font-lock-study-face "Yellow" nil nil t nil t nil nil)
(modify-face 'font-lock-important-face "Yellow" nil nil t nil t nil nil)
(modify-face 'font-lock-question-face "#ffa500" nil nil t nil t nil nil)
(modify-face 'font-lock-see-face "#88C9F0" nil nil t nil t nil nil)
(modify-face 'font-lock-note-face "#8ABB93" nil nil t nil t nil nil)

#+END_SRC

* JavaScript

#+BEGIN_SRC emacs-lisp

(setq js2-basic-offset 2)

;; JSON files are opened with js-mode
(add-hook 'js-mode-hook
          (lambda ()
            (make-local-variable 'js-indent-level)
            (setq js-indent-level 2)))

(add-to-list 'auto-mode-alist '("\\.js\\'" . rjsx-mode))
(add-to-list 'auto-mode-alist '("\\.jsx\\'" . rjsx-mode))
(add-to-list 'interpreter-mode-alist '("node" . rjsx-mode))

(add-to-list 'auto-mode-alist '("\\.hbs\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))

#+END_SRC

* Haskell

#+BEGIN_SRC emacs-list

(add-to-list 'auto-mode-alist '("\\.hs\\'" . haskell-mode))
(add-to-list 'auto-mode-alist '("\\.hs\\'" . intero-mode))

#+END_SRC

* Babel

Define a node path for use with babel and define a place for babel to look for npm modules.

#+BEGIN_SRC emacs-lisp

(setenv "NODE_PATH"
  (concat
    (getenv "HOME") "/org/node_modules" ":"
    (getenv "NODE_PATH")))

(org-babel-do-load-languages
 'org-babel-load-languages
 '((js . t)
   (emacs-lisp . t)
   ))

#+END_SRC


